// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211030082152_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Domain.Entities.AuthCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AuthCode");
                });

            modelBuilder.Entity("Domain.Entities.Deposits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminFeedBack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("DepositMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("OperationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProofImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Pending");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserWalletId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("Domain.Entities.InvestmentPlans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<double>("CurrentProfitPercent")
                        .HasColumnType("float");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<double>("MaxProfitPercent")
                        .HasColumnType("float");

                    b.Property<double>("MinProfitPercent")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("InvestmentPlans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2021, 10, 30, 8, 21, 52, 152, DateTimeKind.Utc).AddTicks(4132),
                            CreatedBy = 0,
                            CurrentProfitPercent = 5.0,
                            LastModifiedBy = 0,
                            MaxProfitPercent = 7.5,
                            MinProfitPercent = 5.0,
                            Name = "IslamicStarterPlan"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2021, 10, 30, 8, 21, 52, 152, DateTimeKind.Utc).AddTicks(4451),
                            CreatedBy = 0,
                            CurrentProfitPercent = 7.5,
                            LastModifiedBy = 0,
                            MaxProfitPercent = 10.0,
                            MinProfitPercent = 7.5,
                            Name = "IslamicSilverPlan"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2021, 10, 30, 8, 21, 52, 152, DateTimeKind.Utc).AddTicks(4455),
                            CreatedBy = 0,
                            CurrentProfitPercent = 10.0,
                            LastModifiedBy = 0,
                            MaxProfitPercent = 12.5,
                            MinProfitPercent = 10.0,
                            Name = "IslamicGoldenPlan"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2021, 10, 30, 8, 21, 52, 152, DateTimeKind.Utc).AddTicks(4456),
                            CreatedBy = 0,
                            CurrentProfitPercent = 12.5,
                            LastModifiedBy = 0,
                            MaxProfitPercent = 15.0,
                            MinProfitPercent = 12.5,
                            Name = "IslamicDiamondPlan"
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2021, 10, 30, 8, 21, 52, 152, DateTimeKind.Utc).AddTicks(4458),
                            CreatedBy = 0,
                            CurrentProfitPercent = 15.0,
                            LastModifiedBy = 0,
                            MaxProfitPercent = 17.5,
                            MinProfitPercent = 15.0,
                            Name = "IslamicPearlPlan"
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2021, 10, 30, 8, 21, 52, 152, DateTimeKind.Utc).AddTicks(4461),
                            CreatedBy = 0,
                            CurrentProfitPercent = 17.5,
                            LastModifiedBy = 0,
                            MaxProfitPercent = 20.0,
                            MinProfitPercent = 17.5,
                            Name = "IslamicPlatinumPlan"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Investments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NextProfitEarningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Plan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Running");

                    b.Property<int>("TotalAddedProfitCount")
                        .HasColumnType("int");

                    b.Property<double>("TotalProfit")
                        .HasColumnType("float");

                    b.Property<int>("TotalProfitShouldBeAddedCount")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Investments");
                });

            modelBuilder.Entity("Domain.Entities.InvestmentsProfits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("InvestmentsId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvestmentsId");

                    b.HasIndex("UserId");

                    b.ToTable("InvestmentsProfits");
                });

            modelBuilder.Entity("Domain.Entities.PaymentMethods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Charge")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Minimum")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WalletId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Charge = 1.0,
                            Created = new DateTime(2021, 10, 30, 8, 21, 52, 166, DateTimeKind.Utc).AddTicks(2300),
                            CreatedBy = 0,
                            LastModifiedBy = 0,
                            LogoUrl = "https://res.cloudinary.com/dbhqoj86r/image/upload/v1634932548/pngwing.com_xnyhvg.png",
                            Minimum = 10,
                            Name = "Perfect Money",
                            WalletId = "U35960081"
                        },
                        new
                        {
                            Id = 2,
                            Charge = 20.0,
                            Created = new DateTime(2021, 10, 30, 8, 21, 52, 166, DateTimeKind.Utc).AddTicks(2314),
                            CreatedBy = 0,
                            LastModifiedBy = 0,
                            LogoUrl = "https://res.cloudinary.com/dbhqoj86r/image/upload/c_pad,h_480,w_960/v1634932790/tether-usdt-logo_bxl3dk.png",
                            Minimum = 10,
                            Name = "USDT (ERC -20)",
                            WalletId = "0x93EC394634568D8d32493cF23142C8f7F98391ef"
                        },
                        new
                        {
                            Id = 3,
                            Charge = 1.0,
                            Created = new DateTime(2021, 10, 30, 8, 21, 52, 166, DateTimeKind.Utc).AddTicks(2316),
                            CreatedBy = 0,
                            LastModifiedBy = 0,
                            LogoUrl = "https://res.cloudinary.com/dbhqoj86r/image/upload/c_pad,h_480,w_960/v1634932790/tether-usdt-logo_bxl3dk.png",
                            Minimum = 10,
                            Name = "USDT (TRC -20)",
                            WalletId = "TSieWboSBuEvbm9WjZ5dXfZySXFxA3mjuX"
                        },
                        new
                        {
                            Id = 4,
                            Charge = 0.0,
                            Created = new DateTime(2021, 10, 30, 8, 21, 52, 166, DateTimeKind.Utc).AddTicks(2317),
                            CreatedBy = 0,
                            LastModifiedBy = 0,
                            LogoUrl = "https://res.cloudinary.com/dbhqoj86r/image/upload/c_pad,h_480,w_960/v1634933345/s_u2npdm.png",
                            Minimum = 10,
                            Name = "Other Methods"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Domain.Entities.Transactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("DepositId")
                        .HasColumnType("int");

                    b.Property<int?>("InvestmentId")
                        .HasColumnType("int");

                    b.Property<int?>("InvestmentProfitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("RecipientTransferId")
                        .HasColumnType("int");

                    b.Property<int?>("SenderTransferId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WithdrawId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepositId")
                        .IsUnique()
                        .HasFilter("[DepositId] IS NOT NULL");

                    b.HasIndex("InvestmentId");

                    b.HasIndex("InvestmentProfitId")
                        .IsUnique()
                        .HasFilter("[InvestmentProfitId] IS NOT NULL");

                    b.HasIndex("RecipientTransferId")
                        .IsUnique()
                        .HasFilter("[RecipientTransferId] IS NOT NULL");

                    b.HasIndex("SenderTransferId")
                        .IsUnique()
                        .HasFilter("[SenderTransferId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.HasIndex("WithdrawId")
                        .IsUnique()
                        .HasFilter("[WithdrawId] IS NOT NULL");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Domain.Entities.Transfers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ReferenceId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Domain.Entities.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<double>("TotalDeposit")
                        .HasColumnType("float");

                    b.Property<double>("TotalInvest")
                        .HasColumnType("float");

                    b.Property<double>("TotalProfit")
                        .HasColumnType("float");

                    b.Property<double>("TotalReferralsEarning")
                        .HasColumnType("float");

                    b.Property<double>("TotalWithdraw")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Domain.Entities.Withdraws", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminFeedBack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Pending");

                    b.Property<double>("UserBalance")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WithdrawAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WithdrawMethod")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Withdraws");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Entities.Deposits", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Deposits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Investments", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Investments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.InvestmentsProfits", b =>
                {
                    b.HasOne("Domain.Entities.Investments", "Investment")
                        .WithMany("InvestmentsProfits")
                        .HasForeignKey("InvestmentsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("InvestmentsProfits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Investment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Transactions", b =>
                {
                    b.HasOne("Domain.Entities.Deposits", "Deposit")
                        .WithOne("Transaction")
                        .HasForeignKey("Domain.Entities.Transactions", "DepositId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Investments", "Investment")
                        .WithMany("Transactions")
                        .HasForeignKey("InvestmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.InvestmentsProfits", "InvestmentsProfit")
                        .WithOne("Transaction")
                        .HasForeignKey("Domain.Entities.Transactions", "InvestmentProfitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Transfers", "RecipientTransfers")
                        .WithOne("RecipientTransaction")
                        .HasForeignKey("Domain.Entities.Transactions", "RecipientTransferId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.Transfers", "SenderTransfers")
                        .WithOne("SenderTransaction")
                        .HasForeignKey("Domain.Entities.Transactions", "SenderTransferId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Withdraws", "Withdraw")
                        .WithOne("Transaction")
                        .HasForeignKey("Domain.Entities.Transactions", "WithdrawId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Deposit");

                    b.Navigation("Investment");

                    b.Navigation("InvestmentsProfit");

                    b.Navigation("RecipientTransfers");

                    b.Navigation("SenderTransfers");

                    b.Navigation("User");

                    b.Navigation("Withdraw");
                });

            modelBuilder.Entity("Domain.Entities.Transfers", b =>
                {
                    b.HasOne("Domain.Entities.User", "Recipient")
                        .WithMany("ReceivedTransfers")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Sender")
                        .WithMany("SentTransfers")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.User", "Reference")
                        .WithMany("ReferenceUsers")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Reference");
                });

            modelBuilder.Entity("Domain.Entities.Wallet", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("Domain.Entities.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Withdraws", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Withdraws")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Deposits", b =>
                {
                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Domain.Entities.Investments", b =>
                {
                    b.Navigation("InvestmentsProfits");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Domain.Entities.InvestmentsProfits", b =>
                {
                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Domain.Entities.Transfers", b =>
                {
                    b.Navigation("RecipientTransaction");

                    b.Navigation("SenderTransaction");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Deposits");

                    b.Navigation("Investments");

                    b.Navigation("InvestmentsProfits");

                    b.Navigation("ReceivedTransfers");

                    b.Navigation("ReferenceUsers");

                    b.Navigation("SentTransfers");

                    b.Navigation("Transactions");

                    b.Navigation("Wallet");

                    b.Navigation("Withdraws");
                });

            modelBuilder.Entity("Domain.Entities.Withdraws", b =>
                {
                    b.Navigation("Transaction");
                });
#pragma warning restore 612, 618
        }
    }
}
